params:
  - params.yaml

vars:
  - src: "src"
  - raw: "data/01_raw"
  - clean: "data/02_clean"
  - main: "data/03_main"
  - python: PYTHONPATH=src python -m

stages:
  nettoyer-2020-municipales-1:
    cmd: >-
      sed '13751,13752s/ \t / / ; 16921s/ \t / /'
      < ${raw}/elections/2020-municipales-1-bureau_de_vote_avant_correction.csv
      > ${raw}/elections/2020-municipales-1-bureau_de_vote.csv
    deps:
      - ${raw}/elections/2020-municipales-1-bureau_de_vote_avant_correction.csv
    outs:
      - ${raw}/elections/2020-municipales-1-bureau_de_vote.csv

  normaliser-format-elections:
    foreach: ${scrutins}
    do:
      cmd: >-
        ${python} hexagonal.resultats.format_${item.format}
        ${raw}/elections/${key}.csv ${clean}/elections/${key}.csv ${item.encoding} "${item.delimiter}"
      deps:
        - ${raw}/elections/${key}.csv
        - ${src}/hexagonal/resultats/format_${item.format}.py
        - ${src}/hexagonal/codes.py
      outs:
        - ${clean}/elections/${key}.csv

  candidats-nettoyer:
    foreach:
      2022-legislatives-1-candidats:
        delimiter: "\t"
        encoding: latin1
      2022-legislatives-2-candidats:
        delimiter: "\t"
        encoding: latin1
      2024-legislatives-1-candidats:
        delimiter: ";"
      2024-legislatives-2-candidats:
        delimiter: ";"
    do:
      cmd: >-
        ${python} hexagonal.candidatures.nettoyer
        ${item}
        "${raw}/elections/${key}.csv"
        "${clean}/elections/${key}.csv"
      deps:
        - ${raw}/elections/${key}.csv
        - ${src}/hexagonal/candidatures/nettoyer.py
      outs:
        - ${clean}/elections/${key}.csv


  2024-legislatives-candidats:
    foreach:
      - 1
      - 2
    do:
      cmd: >-
        ${python} hexagonal.candidatures.legislatives2024
        ${clean}/elections/2024-legislatives-${item}-candidats.csv
        ${raw}/elections/2024-legislatives-nfp-sensibilites.csv
        ${raw}/elections/2024-legislatives-nuances-lfi.csv
        ${main}/elections/2024-legislatives-${item}-candidats.csv
      deps:
        - ${clean}/elections/2024-legislatives-${item}-candidats.csv
        - ${raw}/elections/2024-legislatives-nfp-sensibilites.csv
        - ${raw}/elections/2024-legislatives-nuances-lfi.csv
        - ${src}/hexagonal/candidatures/legislatives2024.py
        - ${src}/hexagonal/codes.py
      outs:
        - ${main}/elections/2024-legislatives-${item}-candidats.csv

  2022-legislatives-candidats:
    foreach:
      - 1
      - 2
    do:
      cmd: >-
        ${python} hexagonal.candidatures.legislatives2022
        ${clean}/elections/2022-legislatives-${item}-candidats.csv
        ${raw}/elections/2022-legislatives-nuances-lemonde.csv
        ${raw}/elections/2022-legislatives-nuances-legis-2022.csv
        ${main}/elections/2022-legislatives-${item}-candidats.csv
      deps:
        - ${clean}/elections/2022-legislatives-${item}-candidats.csv
        - ${clean}/elections/2022-legislatives-1-circonscription.csv
        - ${clean}/elections/2022-legislatives-2-circonscription.csv
        - ${raw}/elections/2022-legislatives-nuances-lemonde.csv
        - ${raw}/elections/2022-legislatives-nuances-legis-2022.csv
        - ${src}/hexagonal/candidatures/legislatives2022.py
        - ${src}/hexagonal/codes.py
      outs:
        - ${main}/elections/2022-legislatives-${item}-candidats.csv

  parrainages_nettoyer:
    foreach:
      - 2022
    do:
      deps:
        - ${raw}/elections/${item}-presidentielle-parrainages.csv
        - ${src}/hexagonal/parrainages/nettoyer.py
      outs:
        - ${clean}/elections/${item}-presidentielle-parrainages.csv
      cmd: >-
        ${python} hexagonal.parrainages.nettoyer
        ${raw}/elections/${item}-presidentielle-parrainages.csv
        ${clean}/elections/${item}-presidentielle-parrainages.csv

  parrainages_qualifier:
    foreach:
      - 2022
    do:
      deps:
        - ${clean}/elections/${item}-presidentielle-parrainages.csv
        - ${clean}/cog/departements.csv
        - ${clean}/cog/communes.csv
        - ${clean}/cog/communes_com.csv
        - ${src}/hexagonal/parrainages/qualifier.py
      outs:
        - ${main}/elections/${item}-presidentielle-parrainages.csv
      cmd: >-
        ${python} hexagonal.parrainages.qualifier
        ${clean}/elections/${item}-presidentielle-parrainages.csv
        ${clean}/cog/
        ${main}/elections/${item}-presidentielle-parrainages.csv

  correspondances_bureau_de_vote_circonscription:
    foreach:
      - 2024
    do:
      cmd: >-
        ${python} hexagonal.correspondances_circonscription
        ${clean}/elections/${item}-legislatives-1-bureau_de_vote.csv
        ${clean}/elections/${item}-legislatives-1-candidats.csv
        ${clean}/elections/${item}-legislatives-correspondances-bureau_de_vote-circonscription.csv
      deps:
        - ${clean}/elections/${item}-legislatives-1-bureau_de_vote.csv
        - ${clean}/elections/${item}-legislatives-1-candidats.csv
        - ${src}/hexagonal/correspondances_circonscription.py
        - ${src}/hexagonal/codes.py
      outs:
        - ${clean}/elections/${item}-legislatives-correspondances-bureau_de_vote-circonscription.csv

  assemblee_nationale_deputees:
    deps:
      - ${raw}/assemblee-nationale.zip
      - ${src}/hexagonal/assemblee_nationale/liste.py
      - ${src}/hexagonal/assemblee_nationale/utils.py
    outs:
      - ${clean}/assemblee_nationale/fiches.csv
      - ${clean}/assemblee_nationale/deputes.csv
      - ${clean}/assemblee_nationale/adresses_postales.csv
      - ${clean}/assemblee_nationale/adresses_electroniques.csv
    cmd: >-
      ${python} hexagonal.assemblee_nationale.liste
      ${raw}/assemblee-nationale.zip
      ${clean}/assemblee_nationale/fiches.csv
      ${clean}/assemblee_nationale/deputes.csv
      ${clean}/assemblee_nationale/adresses_postales.csv
      ${clean}/assemblee_nationale/adresses_electroniques.csv

  assemblee_nationale_mandats:
    deps:
      - ${raw}/assemblee-nationale.zip
      - ${src}/hexagonal/assemblee_nationale/mandats.py
      - ${src}/hexagonal/assemblee_nationale/utils.py
    outs:
      - ${clean}/assemblee_nationale/mandats.csv
    cmd: >-
      ${python} hexagonal.assemblee_nationale.mandats
      ${raw}/assemblee-nationale.zip
      ${clean}/assemblee_nationale/mandats.csv

  assemblee_nationale_groupes:
    deps:
      - ${raw}/assemblee-nationale.zip
      - ${src}/hexagonal/assemblee_nationale/groupes.py
      - ${src}/hexagonal/assemblee_nationale/utils.py
    outs:
      - ${clean}/assemblee_nationale/groupes.csv
      - ${clean}/assemblee_nationale/affiliations.csv
    cmd: >-
      ${python} hexagonal.assemblee_nationale.groupes
      ${raw}/assemblee-nationale.zip
      ${clean}/assemblee_nationale/groupes.csv
      ${clean}/assemblee_nationale/affiliations.csv

  rne_nettoyer:
    foreach:
      - conseillers_arrondissement
      - conseillers_municipaux
      - conseillers_departementaux
      - conseillers_regionaux
      - conseillers_csp
    do:
      deps:
        - ${raw}/rne/${item}.csv
        - ${src}/hexagonal/rne/extraire.py
      outs:
        - ${clean}/rne/${item}.csv
      cmd: >-
        ${python} hexagonal.rne.extraire
        ${raw}/rne
        ${clean}/rne
        ${item}

  annuaire_extraire:
    deps:
      - ${raw}/annuaire/annuaire.tar.bz2
      - ${src}/hexagonal/annuaire/extraire_organismes.py
    outs:
      - ${raw}/annuaire/mairies.json
      - ${raw}/annuaire/epcis.json
      - ${raw}/annuaire/conseils_departementaux.json
      - ${raw}/annuaire/conseils_regionaux.json
      - ${raw}/annuaire/prefectures.json
    cmd: >-
      ${python} hexagonal.annuaire.extraire_organismes
      ${raw}/annuaire/annuaire.tar.bz2
      ${raw}/annuaire/

  annuaires_nettoyer:
    deps:
      - ${raw}/annuaire/mairies.json
      - ${raw}/annuaire/conseils_departementaux.json
      - ${src}/hexagonal/annuaire/nettoyer.py
    outs:
      - ${clean}/annuaire/mairies.csv
      - ${clean}/annuaire/conseils_departementaux.csv
    cmd: >-
      ${python} hexagonal.annuaire.nettoyer
      ${raw}/annuaire
      ${clean}/annuaire
      
  cog_nettoyer:
    deps:
      - ${raw}/cog.zip
      - ${src}/hexagonal/cog/extraire.py
    outs:
      - ${clean}/cog/regions.csv
      - ${clean}/cog/departements.csv
      - ${clean}/cog/communes.csv
      - ${clean}/cog/communes_com.csv
      - ${clean}/cog/communes_historiques.csv
      - ${clean}/cog/com.csv
      - ${clean}/cog/ctcd.csv
      - ${clean}/cog/mouvements_communes.csv
    cmd: >-
      ${python} hexagonal.cog.extraire
      ${raw}/cog.zip
      ${clean}/cog

  epci_nettoyer:
    deps:
      - ${raw}/epci.xlsx
      - ${src}/hexagonal/intercommunalite/nettoyer.py
    outs:
      - ${clean}/epci.csv
      - ${clean}/communes_epci.csv
    cmd: >-
      ${python} hexagonal.intercommunalite.nettoyer
      ${raw}/epci.xlsx
      ${clean}/epci.csv
      ${clean}/communes_epci.csv

  admin_express_extraire:
    deps:
      - ${raw}/admin_express/admin_express_cog.7z
      - ${src}/hexagonal/admin_express/extraire.py
    outs:
      - ${raw}/admin_express/communes.cpg
      - ${raw}/admin_express/communes.dbf
      - ${raw}/admin_express/communes.prj
      - ${raw}/admin_express/communes.shp
      - ${raw}/admin_express/communes.shx
      - ${raw}/admin_express/communes_deleguees.cpg
      - ${raw}/admin_express/communes_deleguees.dbf
      - ${raw}/admin_express/communes_deleguees.prj
      - ${raw}/admin_express/communes_deleguees.shp
      - ${raw}/admin_express/communes_deleguees.shx
      - ${raw}/admin_express/arrondissements_municipaux.cpg
      - ${raw}/admin_express/arrondissements_municipaux.dbf
      - ${raw}/admin_express/arrondissements_municipaux.prj
      - ${raw}/admin_express/arrondissements_municipaux.shp
      - ${raw}/admin_express/arrondissements_municipaux.shx
    cmd: >-
      ${python} hexagonal.admin_express.extraire
      ${raw}/admin_express/admin_express_cog.7z
      ${raw}/admin_express/

  population_nettoyer:
    deps:
      - ${raw}/population_municipale.xlsx
      - ${src}/hexagonal/population/nettoyer.py
    outs:
      - ${clean}/population_municipale.csv
    cmd: >-
      ${python} hexagonal.population.nettoyer
      ${raw}/population_municipale.xlsx
      ${clean}/population_municipale.csv

  cog_qualifier:
    foreach:
      - communes
    do:
      deps:
        - ${clean}/cog/${item}.csv
        - ${clean}/population_municipale.csv
        - ${clean}/epci.csv
        - ${clean}/communes_epci.csv
        - ${src}/hexagonal/cog/qualifier_communes.py
      outs:
        - ${main}/cog/${item}.csv
      cmd: >-
        ${python} hexagonal.cog.qualifier_communes
        ${clean}/cog/${item}.csv
        ${clean}/population_municipale.csv
        ${clean}/epci.csv
        ${clean}/communes_epci.csv
        ${main}/cog/${item}.csv

  communes_details:
    deps:
      - ${raw}/admin_express/communes.cpg
      - ${raw}/admin_express/communes.dbf
      - ${raw}/admin_express/communes.prj
      - ${raw}/admin_express/communes.shp
      - ${raw}/admin_express/communes.shx
    outs:
      - ${main}/contours/communes.json
    cmd: >-
      mkdir -p ${main}/contours/ &&
      node_modules/.bin/mapshaper
      ${raw}/admin_express/communes.shp
      -rename-layers names=communes
      -rename-fields 'code_commune=INSEE_COM,code_departement=INSEE_DEP,code_region=INSEE_REG'
      -rename-fields 'code_arrondissement=INSEE_ARR,code_canton=INSEE_CAN'
      -rename-fields 'nom=NOM,population=POPULATION,siren_epci=SIREN_EPCI,'
      -filter-fields 'code_commune,code_canton,code_arrondissement,code_departement,nom,population,siren_epci'
      -o format=topojson ${main}/contours/communes.json

  circonscriptions_details:
    deps:
      - ${raw}/insee_circonscriptions_legislatives.zip
    outs:
      - ${main}/contours/circonscriptions_legislatives.json
    cmd: >-
      mkdir -p ${main}/contours/ &&
      node_modules/.bin/mapshaper
      ${raw}/insee_circonscriptions_legislatives.zip
      -proj crs=epsg:3857
      -clean gap-fill-area=1km2 snap-interval=300 \
      -proj crs=epsg:4326
      -rename-layers names=circonscriptions_legislatives
      -rename-fields 'code_departement=dep'
      -each 'code_circonscription = code_departement + "-" + id_circo.slice(-2)'
      -filter-fields 'code_circonscription,code_departement'
      -o format=topojson ${main}/contours/circonscriptions_legislatives.json

  communes_carto:
    deps:
      - ${raw}/admin_express/communes.cpg
      - ${raw}/admin_express/communes.dbf
      - ${raw}/admin_express/communes.prj
      - ${raw}/admin_express/communes.shp
      - ${raw}/admin_express/communes.shx
    outs:
      - ${main}/cartographie/communes.json
    cmd: >-
      mkdir -p ${main}/cartographie/ &&
      node_modules/.bin/mapshaper
      ${raw}/admin_express/communes.shp
      -proj crs=epsg:3857
      -rename-fields 'code_commune=INSEE_COM,code_arrondissement=INSEE_ARR,code_canton=INSEE_CAN'
      -rename-fields 'code_departement=INSEE_DEP,code_region=INSEE_REG'
      -rename-fields 'nom=NOM,population=POPULATION,siren_epci=SIREN_EPCI'
      -affine where="code_departement =='971'" shift=6556000,3230000 scale=3
      -affine where="code_departement =='972'" shift=6780000,3405000 scale=4
      -affine where="code_departement =='973'" shift=6150000,4620000 scale=0.6
      -affine where="code_departement =='974'" shift=-5700000,7450000 scale=3
      -affine where="code_departement =='976'" shift=-4310000,6500000 scale=3
      -affine where="['77', '78', '91', '95'].includes(code_departement)" shift=900000,200000 scale=2
      -affine where="['75', '92', '93', '94'].includes(code_departement)" shift=900000,-200000 scale=6
      -simplify resolution=1000
      -filter-fields 'code_commune,code_canton,code_arrondissement,code_departement,code_region,nom,population,siren_epci'
      -rename-layers names=communes
      -o format=topojson ${main}/cartographie/communes.json

  epci_carto:
    deps:
      - ${main}/cartographie/communes.json
      - ${clean}/epci.csv
    outs:
      - ${main}/cartographie/epci.json
    cmd: >-
      node_modules/.bin/mapshaper
      -i files=${clean}/epci.csv name=epci-data string-fields=siren_epci
      -i files=${main}/cartographie/communes.json
      -dissolve fields=siren_epci copy-fields=code_departement,code_region sum-fields=population      
      -join source=epci-data keys=siren_epci,siren_epci fields=nom_epci,type_epci
      -rename-layers names=epci
      -o format=topojson ${main}/cartographie/epci.json  

  departements_carto:
    deps:
      - ${main}/cartographie/communes.json
    outs:
      - ${main}/cartographie/departements.json
    cmd: >-
      node_modules/.bin/mapshaper
      ${main}/cartographie/communes.json
      -dissolve fields=code_departement copy-fields=code_region sum-fields=population
      -rename-layers names=departements
      -o format=topojson ${main}/cartographie/departements.json  

  circonscriptions_carto:
    deps:
      - ${raw}/insee_circonscriptions_legislatives.zip
    outs:
      - ${main}/cartographie/circonscriptions_legislatives.json
    cmd: >-
      mkdir -p ${main}/cartographie/ &&
      node_modules/.bin/mapshaper
      ${raw}/insee_circonscriptions_legislatives.zip
      -proj crs=epsg:3857
      -rename-layers names=circonscriptions_legislatives
      -rename-fields 'code_departement=dep'
      -each 'code_circonscription = code_departement + "-" + id_circo.slice(-2)'
      -clean gap-fill-area=1km2 snap-interval=300 \
      -affine where="code_departement =='971'" shift=6556000,3230000 scale=3
      -affine where="code_departement =='972'" shift=6780000,3405000 scale=4
      -affine where="code_departement =='973'" shift=6150000,4620000 scale=0.6
      -affine where="code_departement =='974'" shift=-5700000,7450000 scale=3
      -affine where="code_departement =='976'" shift=-4310000,6500000 scale=3
      -affine where="['77', '78', '91', '95'].includes(code_departement)" shift=900000,200000 scale=2
      -affine where="['75', '92', '93', '94'].includes(code_departement)" shift=900000,-200000 scale=6
      -simplify resolution=1000
      -filter-fields 'code_circonscription,code_departement'
      -o format=topojson ${main}/cartographie/circonscriptions_legislatives.json

#  tableau_correspondance_anciens_codes_communes:
#    deps:
#      - ${clean}/cog/mouvements_communes.csv
#    outs:
#      - ${main}/cog/correspondances_anciens_codes_communes.csv
#    cmd: >-
#      mkdir -p ${main}/cog/ &&
#      ${python} hexagonal.cog.qualifier_mouvements
#      ${clean}/cog/mouvements_communes.csv
#      2010-01-01
#      ${main}/cog/correspondances_anciens_codes_communes.csv
